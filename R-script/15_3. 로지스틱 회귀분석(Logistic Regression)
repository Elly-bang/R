###############################################
# 15_2. 로지스틱 회귀분석(Logistic Regression) 
###############################################

# 목적 : 일반 회귀분석과 동일하게 종속변수와 독립변수 간의 관계를 나타내어 
# 향후 예측 모델을 생성하는데 있다.

# 차이점 : 종속변수가 범주형 데이터를 대상으로 하며, 입력 데이터가 주어졌을때 
#해당 데이터의 결과가 특정 분류로 나눠지기 때문에 분류분석 방법으로 분류된다. 
#유형 : 이항형(종속변수가 2개 범주yes, no), 다항형(종속변수가 3개 이상 범주)
#다항형 로지스틱 회귀분석: nnet, rpart패키지 이용
#a:0.6  b:0.3 c:0.1-> a분류

#분야: 의료 통신 기타 데이터 마이닝

#선형회귀분석vs로지스틱 회귀분석
#1. 로지스틱 회귀 분석 결과는 0 or1로 나온다. (이항형)
#3. 로직스틱 모형 적용 : 변수 [-무한대, + 무한대] -> 변수 [0,1]사이에 있는 모형
#  -> 로직 변환 : 출력 범위를 [0,1]로 조정
#4. 종속 변수가 2개 이상인 경우 더미 변수 로 변환하여 0, 1로 갖도록 한다. 

#1단계. 데이터 가져오기 
weather=read.csv("c:/ITWILL/2_Rwork/Part-IV/weather.csv", stringsAsFactors = F)
dim(weather)
head(weather)
str(weather)

#chr칼럼, date, rainToday칼럼 제거 
weather_df<- weather[,c(-1,-6,-8,-14)]
str(weather_df)

#RainTommorrow 칼럼 -> 로지스틱 회귀 분석 결과 (0,1)에 맞게 더미 변수 생성
weather_df$RainTomorrow[weather_df$RainTomorrow=='Yes']<-1
weather_df$RainTomorrow[weather_df$RainTomorrow=='NO']<-0
weather_df$RainTomorrow<-as.numeric(weather_df$RainTomorrow)
head(weather_df)   

#더미변수란? 0,1로 변환 

#y빈도수 
table(weather_df$RainTomorrow)
prop.table(table(weather_df$RainTomorrow))

#단계2. 데이터 샘플링
idx<-sample(1:nrow(weather_df),nrow(weather_df)*0.7)
idx
train<-weather_df[idx,]
train
test<- weather_df[-idx,]  
head(test)
#단계3. 로지스틱 회귀 모델 생성: 학습데이터 
weather_model <-glm(RainTomorrow~.,data=train, family = 'binomial')
weather_model
summary(weather_model)

#단계4.로지스틱 회귀모델 예측치 생성: 검정 데이터 
#newdata=test: 새로운 데이터 셋, type="response" : 0~1확률값으로 예측
pred<- predict(weather_model,newdata = test,type="response")
pred
range(pred,na.rm=T) 
summary(pred)
str(pred)

#cut off=0.5
cpred<-ifelse(pred>=0.5,1,0)
table(cpred)

y_true<-test$RainTomorrow

#교차 분할표
tab<-table(y_true, cpred)
tab

#5단계.모델평가

#1)정분류: 분류 정확도 
acc <- (tab[1,1]+tab[2,2])/nrow(test)
cat('accuracy=',acc)

no<-84/90
no


yes<-10/(10+10)
yes

#2) 오분류
no_acc<-(tab[1,2]+tab[2,1])/nrow(test)
no_acc

#3)특이도 : 관측치(NO)-> NO
tab[1,1]/(tab[1,1]+tab[1,2]) 

#4)재현율=민감도: 관측치(YES)-> YES
recall <-tab[2,2] /(tab[2,1]+tab[2,2])
recall

#5)정확률 : 예측치(yes)-> yes
precision <-tab[2,2]/(tab[1,2]+tab[2,2])
precision

#6)F1_score :불균형 비율
F1_score=2*((recall*precision)/(recall+precision))
F1_score


### ROC Curve를 이용한 모형평가(분류정확도)  ####
# Receiver Operating Characteristic

install.packages("ROCR")
library(ROCR)

# ROCR 패키지 제공 함수 : prediction() -> performance
pr <- prediction(pred, test$RainTomorrow)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)


##########################################
#다항형 로지스틱 회귀분석 :nnet
#########################################

install.packages("nnet")
library(nnet)

set.seed(123)
idx<-sample(nrow(iris),nrow(iris)*0.7)
train<-iris[idx,]
test<-iris[-idx,]

#활성함수 
#이항: sigmoid function : 0~1확률값
#다항: softmax function : 0~1 확률값(sum=1)
#y1=0.1 y2=0.1 y3=0.8

names(iris)
model<-multinom(Species~.,data=train)

names(model)
model$fitted.values
range(model$fitted.values)
rowSums

str(model$fitted.values)
model$fitted.values[1,]
train[1,]

y_pred<-predict(model,test)
y_pred

y_true <-test$Species
y_ture

#교차분할표(confusion matrix)
tab <- table(y_true, y_pred)
tab


